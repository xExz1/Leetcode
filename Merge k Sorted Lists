
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
#Approach : Priority Queue / Heap Sort algorithm - min heap

import heapq
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        vals = []
        for node in lists:
            while node:
                vals.append(node.val)
                node = node.next
        if not vals:
            return None
        heapq.heapify(vals)
        dummy = ListNode(0)
        curr = dummy
        while vals:
            val = heapq.heappop(vals)
            curr.next = ListNode(val)
            curr = curr.next
        
        return dummy.next
